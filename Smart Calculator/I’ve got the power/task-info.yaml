type: edu
files:
- name: src/calculator/Main.kt
  visible: true
  text: |-
    package calculator

    import java.lang.Exception
    import kotlin.math.pow

    val store = mutableMapOf<String, Int>()
    val valuesInt = mutableListOf<Int>()
    val ops = mutableListOf<String>()
    val parentheses = mutableListOf<Int>()

    fun main() {
        val regexCom = "\\/\\w+".toRegex()
        val regexSet = "\\w+(\\s*\\=\\s*\\w+)+".toRegex()
        val regeXGet = "\\w+".toRegex()
        val regexNum = "[-+]?\\d+".toRegex()
        val regexExp = "\\(?[-+]?\\w+(\\s*([+]*|[-]*|\\/|\\*|\\^)\\s*\\(?[-+]?\\w+\\)?)+".toRegex()
        while(true) {
            val input = readln().trim()
            if ( input.matches(regexCom) ) { //input is a command
                if (input == "/exit") {
                    println("Bye!")
                    break
                } else if (input == "/help") {
                    println("The program calculates the sum of numbers")
                }
                else println("Unknown command")
            }
            else if (input.matches(regeXGet)) {
                getItem(input)
            }
            else if(input.matches(regexNum)) {
                println(input.toInt())
            }
            else if (input.matches(regexExp)) {
                println(workInput(input))
            }
            else if (input.matches(regexSet)) {
                addItem(input)
            }
            else if (input == "") {}
            else println("Invalid expression")
        }
    }

    fun getItem(input: String) {
        val regexValid = "[A-Za-z]+".toRegex()
        if (!input.matches(regexValid)) {
            println("Invalid identifier")
        }
        else {
            if (store.containsKey(input)) {
                println(store[input])
            }
            else println("Unknown variable")
        }
    }

    fun addItem(input:String) {
        val nameEqVal = input.split("\\s*\\=\\s*".toRegex())
        //println("nameEqualsvalue: $nameEqVal, size: ${nameEqVal.size}")
        if(!nameEqVal[0].matches("[A-Za-z]+".toRegex())){   //Invalid name
            println("Invalid identifier")
        }
        else if (nameEqVal.size == 2) { //Valid name and 2 arguments
            //println("Valid name")
            if (nameEqVal[1].matches("[-+]?\\d+".toRegex())) {
                //println("Valid name with integer input")
                store[nameEqVal[0]] = nameEqVal[1].toInt()
            }
            else if (nameEqVal[1].matches("[A-Za-z]+".toRegex())) {
                //println("Valid name with text input")
                if (!store.containsKey(nameEqVal[1])) { // Variable not set
                    println("Unknown variable")
                }
                else { //Previously set variable
                    //println("Previously set nameEqVal[1] =  ${store[nameEqVal[1]]}")
                    store[nameEqVal[0]] = store.getValue(nameEqVal[1])
                }
            }
            else println("Invalid assignment")
        }
        else println("Invalid assignment")
    }

    fun workInput(input: String): Int{
        valuesInt.clear()
        ops.clear()
        parentheses.clear()
        var inputCor = input.replace("\\s+".toRegex(), "")
        inputCor = inputCor.replace("\\++".toRegex(), "+")
        val minRegex = "\\--+".toRegex()
        while(inputCor.contains(minRegex)) {
            val replacement = if(minRegex.find(inputCor)!!.value.length % 2 == 0) "+" else "-"
            inputCor = inputCor.replaceFirst(minRegex, replacement)
        }
        val all = inputCor.split("(?<=[\\++\\-+\\/\\*\\^])|(?=[+-\\/\\*\\^])".toRegex())
        val values = all.filterIndexed { index , _-> index % 2 == 0  }
        //println(all)
        //println("values: $values")
        val operators = all.filterIndexed { index , _-> index % 2 == 1  }
        ops.addAll(operators)

        for (value in values) {
            if (value.matches("\\d+".toRegex())) {
                valuesInt.add(value.toInt())
                parentheses.add(0)
            }
            else if (value.matches("[A-Za-z]+".toRegex())){
                if (store.containsKey(value)) {
                    valuesInt.add(store.getValue(value))
                    parentheses.add(0)
                }
                else println("Unknown variable")
            }
            else if (value.matches("\\(\\d+".toRegex())) {
                valuesInt.add(value.drop(1).toInt())
                parentheses.add(-1)
            }
            else if (value.matches("\\d+\\)".toRegex())) {
                valuesInt.add(value.dropLast(1).toInt())
                parentheses.add(1)
            }
            else throw Exception("Invalid assignment")
        }

        for (i in 0 until ops.size) {
            if (ops[i].all { it == '+' }) {
                ops[i] = "+"
            }
            else if (ops[i].all{ it == '-' }) {
                if (ops[i].length % 2 == 0) ops[i] = "+"
                else ops[i] = "-"
            }
            else if(ops[i] == "*" || ops[i] == "/" || ops[i] == "^") {
            }
            else throw Exception("Invalid expression")
        }

        if (valuesInt.size != operators.size + 1 || parentheses.sum() != 0){
            println("Invalid expression")
        }

        printValues()
        //var result = valuesInt[0]

        while ( parentheses.any{ it == -1 } ) {
            calcParenthesis()
        }
        while (ops.contains("^")) {
            calcPowers()
        }
        while (ops.contains("*")){
            calcMult()
        }
        while (ops.contains("/")){
            calcDiv()
        }
        while (ops.contains("-")){
            calcMinus()
        }
        while (ops.contains("+")){
            calcPlus()
        }

        return valuesInt[0]
    }

    fun calcPlus() {
        val start = ops.indexOf("+")
        val end = start + 1
        val res = valuesInt[start] + valuesInt[end]
        valuesInt[start] = res
        valuesInt.removeAt(end)
        ops.removeAt(start)
        parentheses[start] = 0
        parentheses.removeAt(end)
        printValues()
    }

    fun calcMinus() {
        val start = ops.indexOf("-")
        val end = start + 1
        val res = valuesInt[start] - valuesInt[end]
        valuesInt[start] = res
        valuesInt.removeAt(end)
        ops.removeAt(start)
        parentheses[start] = 0
        parentheses.removeAt(end)
        printValues()
    }

    fun calcMult() {
        val start = ops.indexOf("*")
        val end = start + 1
        val res = valuesInt[start] * valuesInt[end]
        valuesInt[start] = res
        valuesInt.removeAt(end)
        ops.removeAt(start)
        parentheses[start] = 0
        parentheses.removeAt(end)
        printValues()
    }
    fun calcDiv() {
        val start = ops.indexOf("/")
        val end = start + 1
        val res = valuesInt[start] / valuesInt[end]
        valuesInt[start] = res
        valuesInt.removeAt(end)
        ops.removeAt(start)
        parentheses[start] = 0
        parentheses.removeAt(end)
        printValues()
    }

    fun calcPowers() {
        val start = ops.indexOf("^")
        val end = start + 1
        val res = valuesInt[start].toFloat().pow(valuesInt[end].toFloat()).toInt()
        valuesInt[start] = res
        valuesInt.removeAt(end)
        ops.removeAt(start)
        parentheses[start] = 0
        parentheses.removeAt(end)
        printValues()
    }

    fun calcParenthesis() {
        val start = parentheses.indexOf(-1)
        val end = parentheses.indexOf(1)
        val res = when (ops[start]) {
            "+" -> valuesInt[start] + valuesInt[end]
            "-" -> valuesInt[start] - valuesInt[end]
            "*" -> valuesInt[start] * valuesInt[end]
            "/" -> valuesInt[start] / valuesInt[end]
            "^" -> valuesInt[start].toFloat().pow(valuesInt[end].toFloat()).toInt()
            else -> valuesInt[start]
        }
        //println("result = $res")
        valuesInt[start] = res
        valuesInt.removeAt(end)
        ops.removeAt(start)
        parentheses[start] = 0
        parentheses.removeAt(end)
        printValues()
    }

    fun printValues() {
        /*println("Values: $valuesInt" )
        println("parentheses: $parentheses")
        println("operators: $ops")*/
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // tests of functionality of previous steps
                    main.start();

                    // test of /help
                    String output = main.execute("/help").trim();
                    if (output.length() < 4) {
                        return CheckResult.wrong(
                            "It seems like there was no any \"help\" message.");
                    }

                    // input empty string
                    output = main.execute("");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Incorrect response to an empty string. " +
                            "The program should not print anything.");
                    }

                    // testing basic assignment
                    output = main.execute("n = -32");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // testing a big amount of numbers
                    output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition and " +
                                "subtraction operations correctly.");
                    }

                    // the same with a variable
                    output = main.execute("33 + 20 + 11 + 49 + n - 9 + 1 - 80 + 4").trim();
                    if (!output.equals("-3")) {
                        return CheckResult.wrong(
                            "The program cannot process addition and " +
                                "subtraction operations correctly.");
                    }


                    output = main.execute("c = n \nc = -2");
                    if (output.length() != 0) {
                        return CheckResult.wrong(
                            "Unexpected reaction after assignment." +
                            "The program should not print anything in this case.");
                    }

                    // check value
                    output = main.execute("  c   ").trim();
                    if (!output.equals("-2")) {
                        return CheckResult.wrong(
                            "The variable stores not a correct value." +
                            "May be the program could not assign the value " +
                                "of one variable to another one.");
                    }

                    // the sum of the numbers is zero
                    output = main.execute("11 - 9 + c").trim();
                    if (!output.equals("0")) {
                        return CheckResult.wrong(
                            "The problem when sum is equal to 0 has occurred.");
                    }

                    // test of multiple operations
                    output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                    if (!output.equals("10")) {
                        return CheckResult.wrong(
                            "The program cannot process multiple operations " +
                                "with several operators.");
                    }

                    // test of a nonexistent command
                    output = main.execute("/start").trim().toLowerCase();
                    if (!output.startsWith("unknown")) {
                        return CheckResult.wrong(
                            "The program should print \"Unknown command\" " +
                            "when a nonexistent command is entered.");
                    }

                    // testing invalid variable name
                    output = main.execute("var1 = 1").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The name of variable should contain only Latin letters.");
                    }

                    // testing invalid value
                    output = main.execute("var = 2a").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The value can be an integer number or a value of another variable");
                    }

                    // testing multiple equalization
                    output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle a invalid assignment.");
                    }

                    // testing assignment by unassigned variable
                    output = main.execute("variable = f").trim().toLowerCase();
                    if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                        return CheckResult.wrong(
                            "The program should not allow an assignment by unassigned variable.");
                    }

                    // checking case sensitivity
                    main.execute("variable = 777");
                    output = main.execute("Variable").trim().toLowerCase();
                    if (!output.startsWith("unknown") && !output.startsWith("invalid")) {
                        return CheckResult.wrong("The program should be case sensitive.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // A test suit for multiplication and division
                    main.start();

                    String output = main.execute("4 * 3").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program has problems with multiplication operation.");
                    }

                    output = main.execute("91 / 13").trim();
                    if (!output.equals("7")) {
                        return CheckResult.wrong(
                            "The program has problems with division operation.");
                    }

                    // testing all operators
                    main.execute(" a= 7 \n b =2");
                    output = main.execute("a * 4 / b - (3 - 1)").trim();
                    if (!output.equals("12")) {
                        return CheckResult.wrong(
                            "The program cannot correctly process several operations.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),

                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // testing priority of parentheses
                    main.start();

                    // expression from the example
                    String output = main.execute(
                        "7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();

                    if (!output.equals("155")) {
                        return CheckResult.wrong(
                            "The program cannot reproduce an example from the task.");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                }),
                new TestCase<String>().setDynamicTesting(() -> {
                    TestedProgram main = new TestedProgram();

                    // a set of negative tests
                    main.start();

                    // tests with unclosed brackets
                    String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                    String output1 = main.execute("4 + 5)").trim().toLowerCase();
                    if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "The program could not handle an invalid expression.");
                    }

                    // sequence of * test
                    output = main.execute("2 ************ 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"*\" should return \"Invalid expression\".");
                    }

                    // sequence of / test
                    output = main.execute("2 // 2").trim().toLowerCase();
                    if (!output.startsWith("invalid")) {
                        return CheckResult.wrong(
                            "A sequence of \"/\" should return \"Invalid expression\".");
                    }

                    // test of /exit
                    output = main.execute("/exit").trim().toLowerCase();
                    if (!output.startsWith("bye")) {
                        return CheckResult.wrong(
                            "Your program didn't print \"bye\" after entering \"/exit\".");
                    }

                    return new CheckResult(main.isFinished(),
                        "Your program should exit after entering \"/exit\".");
                })
            );
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/7815#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 29 Nov 2022 12:00:00 UTC"
record: 6
